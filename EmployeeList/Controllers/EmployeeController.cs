using EmployeeList.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace EmployeeList.Controllers
{
    // Route decorators
    [Route("api/[controller]")]
    [Route("api/[controller]/{id}")]

    [ApiController]
    public class EmployeeController : ControllerBase
    {
        // GET
        [HttpGet]
        public ActionResult Get()
        {
            try
            {
                EmployeeContext ctx = new EmployeeContext();

                List<Employee> employees = ctx.Employees.Where(x => x.isActive).ToList();   // returns employee records where isActive = true

                return Ok(employees);   // returns 200 status code
            }
            catch (Exception e)
            {
                return StatusCode(500);
            }
        }

        // DELETE
        [HttpDelete("{employeeID}")]
        public ActionResult Delete(int employeeID)  // ID required from front-end to identify record
        {
            try
            {
                EmployeeContext ctx = new EmployeeContext();

                Employee employee = ctx.Employees.Where(x => x.employeeID == employeeID).FirstOrDefault();  // returns first record where ID matches

                employee.isActive = false;  // set isActive field to false to disable displaying in view

                ctx.Employees.Update(employee); // updates employee record

                ctx.SaveChanges();

                return Ok(StatusCode(200)); // returns 200 status code
            }
            catch (Exception e)
            {
                return StatusCode(500);
            }
        }

        // POST
        [HttpPost]
        public ActionResult Post(Employee employee) // ID generated by SQL, not required from front-end
        {
            try
            {
                EmployeeContext ctx = new EmployeeContext();

                employee.isActive = true;   // set isActive to true by default upon employee creation

                ctx.Employees.Add(employee);    // adds record

                ctx.SaveChanges();

                return Ok(StatusCode(200)); // returns 200 status code
            }
            catch (Exception e)
            {
                return StatusCode(500);
            }
        }


        // PUT
        [HttpPut]
        public ActionResult Put(Employee employee)  // ID required from front-end to identify record
        {
            try
            {
                EmployeeContext ctx = new EmployeeContext();

                ctx.Employees.Update(employee); // updates employee record with changed submitted values

                ctx.SaveChanges();

                return Ok(StatusCode(200)); // returns 200 status code
            }
            catch (Exception e)
            {
                return StatusCode(500);
            }
        }
    }
}
