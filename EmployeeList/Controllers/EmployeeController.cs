using EmployeeList.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace EmployeeList.Controllers
{
    [Route("api/[controller]")]
    [Route("api/[controller]/{id}")]

    [ApiController]
    public class EmployeeController : ControllerBase
    {
        [HttpGet]
        public ActionResult Get()
        {
            try
            {
                EmployeeContext ctx = new EmployeeContext();

                List<Employee> employees = ctx.Employees.Where(x => x.isActive).ToList();

                return Ok(employees); // returns 200 status code
            }
            catch (Exception e)
            {
                return StatusCode(500);
            }
        }

        [HttpDelete("{employeeID}")]
        public ActionResult Delete(int employeeID)
        {
            try
            {
                EmployeeContext ctx = new EmployeeContext();

                Employee employee = ctx.Employees.Where(x => x.employeeID == employeeID).FirstOrDefault();

                employee.isActive = false;

                ctx.Employees.Update(employee);

                ctx.SaveChanges();

                return Ok(StatusCode(200)); // returns 200 status code
            }
            catch (Exception e)
            {
                return StatusCode(500);
            }
        }

        [HttpPost]
        public ActionResult Post(Employee employee) //ID not required from frontend..will be generated by sql
        {
            try
            {
                EmployeeContext ctx = new EmployeeContext();

                employee.isActive = true;

                ctx.Employees.Add(employee);

                ctx.SaveChanges();

                return Ok(StatusCode(200)); // returns 200 status code
            }
            catch (Exception e)
            {
                return StatusCode(500);
            }
        }

        [HttpPut]
        public ActionResult Put(Employee employee) // ID required from fronted to identify record
        {
            try
            {
                EmployeeContext ctx = new EmployeeContext();

                ctx.Employees.Update(employee);

                ctx.SaveChanges();

                return Ok(StatusCode(200)); // returns 200 status code
            }
            catch (Exception e)
            {
                return StatusCode(500);
            }
        }
    }
}
